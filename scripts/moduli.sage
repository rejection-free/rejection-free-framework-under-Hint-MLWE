

# This file was *autogenerated* from the file moduli.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_64 = Integer(64); _sage_const_128 = Integer(128)
verbose = _sage_const_0   # set to 1 for debugging
code = _sage_const_1 

load("codegen.sage")


out = ""
out += f"/* auto-generated by moduli.sage */\n"
out += f"#ifndef MODULI_H\n"
out += f"#define MODULI_H\n"
out += f"#include <stdint.h>\n"
out += f"\n"

for d in [_sage_const_64 , _sage_const_128 ]:
    out += f"/***********************************************************\n"
    out += f" * degree {d} params\n"
    out += f" */\n"
    out += f"\n"

    exps = bitrev_exps(d)
    prod_min = min_P(d, max_proofsystem_modulus, max_adds)
    moduli, nbit_prods, ms = moduli_list(nbit, d, prod_min)
    moduli_str = []

    out += f"#define NMODULI_D{d} {len(moduli)}\n"
    out += f"extern void *hexl_ntt_d{d}[];\n\n"

    for i in range(len(moduli)):
        P = prod(moduli[:(i+_sage_const_1 )])
        p = moduli[i]

        nlimbs = int2limbs(P)[_sage_const_1 ]

        nbits_prod = nbit_prods[i]
        m = ms[i]
        inttc = intt_const(d, p)
        redr = mont_redr(R, p)
        pinv = mont_pinv(p, R)

        w = min_root(d, p)
        roots = root_list(w, exps, p, R)
        roots_array = intlist2intarray(roots)

        Pp_str = []
        Pp = []
        k = []
        for j in range(i+_sage_const_1 ):
            Pp_str += [f"Pp_d{d}_p{i}_{j}"]
            Pp += [P / moduli[j]]
            k += [redc(Mod(_sage_const_1  / Pp[j], moduli[j]), moduli[j])]
        Pp_array = strlist2ptrarray(Pp_str)
        k_array = intlist2intarray(k)

        moduli_str += [f"d{d}_p{i}"]
        out += f"static const int_t P_d{d}_p{i}[] = {P};\n"
        out += f"static const crtcoeff_t roots_d{d}_p{i}[] = {roots_array};\n"
        out += f"static const crtcoeff_t k_d{d}_p{i}[] = {k_array};\n"
        out += int_t(f"P_d{d}_p{i}", P) + f"\n"
        for j in range(i+_sage_const_1 ):
            out += int_t(f"Pp_d{d}_p{i}_{j}", Pp[j], nlimbs) + f"\n"
        out += f"static const int_srcptr Pp_d{d}_p{i}[] = {Pp_array};\n"

        out += f"static const modulus_t d{d}_p{i} = {{{{roots_d{d}_p{i}, {p}, {pinv}, {redr}, {inttc}, {m}, P_d{d}_p{i}, Pp_d{d}_p{i}, k_d{d}_p{i}, {nbits_prod}}}}};\n\n"
    out += f"\n"

    moduli_array = strlist2ptrarray(moduli_str)

    out += f"static const modulus_srcptr moduli_d{d}[] = {moduli_array};\n\n"
out += f"#endif\n"

printc(out)

